package com.zzptc.sky.dbphoneguard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzptc.sky.dbphoneguard.entity.FunctionTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "function_table".
*/
public class FunctionTableDao extends AbstractDao<FunctionTable, Long> {

    public static final String TABLENAME = "function_table";

    /**
     * Properties of entity FunctionTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property FuncName = new Property(1, String.class, "funcName", false, "FUNC_NAME");
        public final static Property FuncPic = new Property(2, String.class, "funcPic", false, "FUNC_PIC");
        public final static Property FuncIndex = new Property(3, Integer.class, "funcIndex", false, "FUNC_INDEX");
        public final static Property FuncFixed = new Property(4, Boolean.class, "funcFixed", false, "FUNC_FIXED");
    }

    private DaoSession daoSession;


    public FunctionTableDao(DaoConfig config) {
        super(config);
    }
    
    public FunctionTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"function_table\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"FUNC_NAME\" TEXT NOT NULL ," + // 1: funcName
                "\"FUNC_PIC\" TEXT NOT NULL ," + // 2: funcPic
                "\"FUNC_INDEX\" INTEGER NOT NULL ," + // 3: funcIndex
                "\"FUNC_FIXED\" INTEGER);"); // 4: funcFixed
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_function_table_FUNC_NAME ON function_table" +
                " (\"FUNC_NAME\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"function_table\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, FunctionTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFuncName());
        stmt.bindString(3, entity.getFuncPic());
        stmt.bindLong(4, entity.getFuncIndex());
 
        Boolean funcFixed = entity.getFuncFixed();
        if (funcFixed != null) {
            stmt.bindLong(5, funcFixed ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, FunctionTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getFuncName());
        stmt.bindString(3, entity.getFuncPic());
        stmt.bindLong(4, entity.getFuncIndex());
 
        Boolean funcFixed = entity.getFuncFixed();
        if (funcFixed != null) {
            stmt.bindLong(5, funcFixed ? 1L: 0L);
        }
    }

    @Override
    protected final void attachEntity(FunctionTable entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public FunctionTable readEntity(Cursor cursor, int offset) {
        FunctionTable entity = new FunctionTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // funcName
            cursor.getString(offset + 2), // funcPic
            cursor.getInt(offset + 3), // funcIndex
            cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0 // funcFixed
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, FunctionTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setFuncName(cursor.getString(offset + 1));
        entity.setFuncPic(cursor.getString(offset + 2));
        entity.setFuncIndex(cursor.getInt(offset + 3));
        entity.setFuncFixed(cursor.isNull(offset + 4) ? null : cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(FunctionTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(FunctionTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(FunctionTable entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
