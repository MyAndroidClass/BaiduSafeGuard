package com.zzptc.sky.dbphoneguard.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zzptc.sky.dbphoneguard.entity.ContactInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "contact_info".
*/
public class ContactInfoDao extends AbstractDao<ContactInfo, Void> {

    public static final String TABLENAME = "contact_info";

    /**
     * Properties of entity ContactInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Name = new Property(0, String.class, "name", false, "NAME");
        public final static Property Phone = new Property(1, String.class, "phone", false, "PHONE");
        public final static Property Attribute = new Property(2, String.class, "attribute", false, "ATTRIBUTE");
        public final static Property HeadColor = new Property(3, int.class, "headColor", false, "HEAD_COLOR");
    }

    private DaoSession daoSession;


    public ContactInfoDao(DaoConfig config) {
        super(config);
    }
    
    public ContactInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"contact_info\" (" + //
                "\"NAME\" TEXT," + // 0: name
                "\"PHONE\" TEXT," + // 1: phone
                "\"ATTRIBUTE\" TEXT," + // 2: attribute
                "\"HEAD_COLOR\" INTEGER NOT NULL );"); // 3: headColor
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"contact_info\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ContactInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String attribute = entity.getAttribute();
        if (attribute != null) {
            stmt.bindString(3, attribute);
        }
        stmt.bindLong(4, entity.getHeadColor());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ContactInfo entity) {
        stmt.clearBindings();
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(1, name);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(2, phone);
        }
 
        String attribute = entity.getAttribute();
        if (attribute != null) {
            stmt.bindString(3, attribute);
        }
        stmt.bindLong(4, entity.getHeadColor());
    }

    @Override
    protected final void attachEntity(ContactInfo entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public ContactInfo readEntity(Cursor cursor, int offset) {
        ContactInfo entity = new ContactInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // name
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // phone
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // attribute
            cursor.getInt(offset + 3) // headColor
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ContactInfo entity, int offset) {
        entity.setName(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhone(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAttribute(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setHeadColor(cursor.getInt(offset + 3));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(ContactInfo entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(ContactInfo entity) {
        return null;
    }

    @Override
    public boolean hasKey(ContactInfo entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
